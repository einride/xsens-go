// Code generated by "stringer -type ErrorCode -trimprefix ErrorCode -output errorcode_string.go errorcode.go"; DO NOT EDIT.

package xsens

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ErrorCodeOK-0]
	_ = x[ErrorCodeNoBus-1]
	_ = x[ErrorCodeBusNotReady-2]
	_ = x[ErrorCodeInvalidPeriod-3]
	_ = x[ErrorCodeInvalidMessage-4]
	_ = x[ErrorCodeInitBusFail1-16]
	_ = x[ErrorCodeInitBusFail2-17]
	_ = x[ErrorCodeInitBusFail3-18]
	_ = x[ErrorCodeSetBIDFail1-20]
	_ = x[ErrorCodeSetBIDFail2-21]
	_ = x[ErrorCodeMeasurementFail1-24]
	_ = x[ErrorCodeMeasurementFail2-25]
	_ = x[ErrorCodeMeasurementFail3-26]
	_ = x[ErrorCodeMeasurementFail4-27]
	_ = x[ErrorCodeMeasurementFail5-28]
	_ = x[ErrorCodeMeasurementFail6-29]
	_ = x[ErrorCodeTimerOverflow-30]
	_ = x[ErrorCodeBaudrateInvalid-32]
	_ = x[ErrorCodeInvalidParam-33]
	_ = x[ErrorCodeMeasurementFail7-35]
	_ = x[ErrorCodeMeasurementFail8-36]
	_ = x[ErrorCodeDeviceError-40]
	_ = x[ErrorCodeDataOverflow-41]
	_ = x[ErrorCodeBufferOverflow-42]
}

const (
	_ErrorCode_name_0 = "OKNoBusBusNotReadyInvalidPeriodInvalidMessage"
	_ErrorCode_name_1 = "InitBusFail1InitBusFail2InitBusFail3"
	_ErrorCode_name_2 = "SetBIDFail1SetBIDFail2"
	_ErrorCode_name_3 = "MeasurementFail1MeasurementFail2MeasurementFail3MeasurementFail4MeasurementFail5MeasurementFail6TimerOverflow"
	_ErrorCode_name_4 = "BaudrateInvalidInvalidParam"
	_ErrorCode_name_5 = "MeasurementFail7MeasurementFail8"
	_ErrorCode_name_6 = "DeviceErrorDataOverflowBufferOverflow"
)

var (
	_ErrorCode_index_0 = [...]uint8{0, 2, 7, 18, 31, 45}
	_ErrorCode_index_1 = [...]uint8{0, 12, 24, 36}
	_ErrorCode_index_2 = [...]uint8{0, 11, 22}
	_ErrorCode_index_3 = [...]uint8{0, 16, 32, 48, 64, 80, 96, 109}
	_ErrorCode_index_4 = [...]uint8{0, 15, 27}
	_ErrorCode_index_5 = [...]uint8{0, 16, 32}
	_ErrorCode_index_6 = [...]uint8{0, 11, 23, 37}
)

func (i ErrorCode) String() string {
	switch {
	case 0 <= i && i <= 4:
		return _ErrorCode_name_0[_ErrorCode_index_0[i]:_ErrorCode_index_0[i+1]]
	case 16 <= i && i <= 18:
		i -= 16
		return _ErrorCode_name_1[_ErrorCode_index_1[i]:_ErrorCode_index_1[i+1]]
	case 20 <= i && i <= 21:
		i -= 20
		return _ErrorCode_name_2[_ErrorCode_index_2[i]:_ErrorCode_index_2[i+1]]
	case 24 <= i && i <= 30:
		i -= 24
		return _ErrorCode_name_3[_ErrorCode_index_3[i]:_ErrorCode_index_3[i+1]]
	case 32 <= i && i <= 33:
		i -= 32
		return _ErrorCode_name_4[_ErrorCode_index_4[i]:_ErrorCode_index_4[i+1]]
	case 35 <= i && i <= 36:
		i -= 35
		return _ErrorCode_name_5[_ErrorCode_index_5[i]:_ErrorCode_index_5[i+1]]
	case 40 <= i && i <= 42:
		i -= 40
		return _ErrorCode_name_6[_ErrorCode_index_6[i]:_ErrorCode_index_6[i+1]]
	default:
		return "ErrorCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
